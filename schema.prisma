// *************************************************************************************************
// NOTICE:
// 
// This schema.prisma is generated by the Prisma CLI and managed programmatically by Innate.
// Do not edit this file directly. Edits to this file will be overwritten.
// *************************************************************************************************

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "./src/generated/type-graphql"
  emitTranspiledCode = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["innate", "public", "v1"]
}

/// @@TypeGraphQL.type(name: "Administrator")
model Administrator {
  id             String   @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  /// @TypeGraphQL.omit(output: true, input: true)
  hash           String
  /// @TypeGraphQL.omit(output: true, input: true)
  salt           String
  /// @TypeGraphQL.omit(output: true, input: true)
  magicLinkToken String?  @map("magic_link_token")
  email          String   @unique
  banned         Boolean? @default(false)
  username       String   @unique
  verified       Boolean? @default(false)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("administrator")
  @@schema("innate")
}

/// @@TypeGraphQL.type(name: "Field")
model Field {
  id               String            @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  tableId          String?           @map("table_id") @db.Uuid
  name             String
  type             String
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime          @default(now()) @map("updated_at") @db.Timestamp(6)
  table            Table?            @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  fieldAnnotations FieldAnnotation[]

  @@map("field")
  @@schema("innate")
}

/// @@TypeGraphQL.type(name: "RevokedRefreshToken")
model RevokedRefreshToken {
  id               String   @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  value            String   @unique
  actualExpiration DateTime @default(now()) @map("actual_expiration") @db.Timestamp(6)

  @@map("revoked_refresh_token")
  @@schema("innate")
}

/// @@TypeGraphQL.type(name: "Schema")
model Schema {
  id        String   @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  tables    Table[]

  @@map("schema")
  @@schema("innate")
}

/// @@TypeGraphQL.type(name: "Table")
model Table {
  id               String            @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  schemaId         String?           @map("schema_id") @db.Uuid
  name             String
  modelName        String            @map("model_name")
  relations        Json?
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime          @default(now()) @map("updated_at") @db.Timestamp(6)
  fields           Field[]
  fieldAnnotations FieldAnnotation[]
  schema           Schema?           @relation(fields: [schemaId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("table")
  @@schema("innate")
}

/// @@TypeGraphQL.type(name: "User")
model User {
  id             String   @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  /// @TypeGraphQL.omit(output: true, input: true)
  hash           String
  /// @TypeGraphQL.omit(output: true, input: true)
  salt           String
  /// @TypeGraphQL.omit(output: true, input: true)
  magicLinkToken String?  @map("magic_link_token")
  email          String   @unique
  banned         Boolean? @default(false)
  username       String   @unique
  verified       Boolean? @default(false)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("user")
  @@schema("innate")
}

/// @@TypeGraphQL.type(name: "FieldAnnotation")
model FieldAnnotation {
  id         String   @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  tableId    String?  @map("table_id") @db.Uuid
  modelName  String   @map("model_name")
  fieldId    String?  @map("field_id") @db.Uuid
  fieldName  String   @map("field_name")
  annotation String
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  field      Field?   @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  table      Table?   @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("field_annotation")
  @@schema("innate")
}

model V1User {
  id        String   @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("user")
  @@schema("v1")
}

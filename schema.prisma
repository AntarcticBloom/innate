generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "./src/generated/type-graphql"
  emitTranspiledCode = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["innate", "public"]
}

model administrator {
  id               String   @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  hash             String
  salt             String
  magic_link_token String?
  email            String   @unique
  banned           Boolean? @default(false)
  username         String   @unique
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)

  @@schema("innate")
}

model field {
  id         String   @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  model_id   String?  @db.Uuid
  name       String
  type       String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  model      model?   @relation(fields: [model_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("innate")
}

model model {
  id         String   @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  schema_id  String?  @db.Uuid
  name       String
  ui_name    String
  relations  Json?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  field      field[]
  schema     schema?  @relation(fields: [schema_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("innate")
}

model schema {
  id         String   @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  name       String   @unique
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  model      model[]

  @@schema("innate")
}

model User {
  id               String   @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  hash             String
  salt             String
  magic_link_token String?
  email            String   @unique
  banned           Boolean? @default(false)
  username         String   @unique
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)

  @@schema("innate")
}

model revoked_refresh_token {
  id                String   @id @default(dbgenerated("innate.uuid_generate_v4()")) @db.Uuid
  value             String   @unique
  actual_expiration DateTime @default(now()) @db.Timestamp(6)

  @@schema("innate")
}

import type { GraphQLResolveInfo } from "graphql";
import { AggregateFieldAnnotationArgs } from "./args/AggregateFieldAnnotationArgs";
import { CreateManyFieldAnnotationArgs } from "./args/CreateManyFieldAnnotationArgs";
import { CreateOneFieldAnnotationArgs } from "./args/CreateOneFieldAnnotationArgs";
import { DeleteManyFieldAnnotationArgs } from "./args/DeleteManyFieldAnnotationArgs";
import { DeleteOneFieldAnnotationArgs } from "./args/DeleteOneFieldAnnotationArgs";
import { FindFirstFieldAnnotationArgs } from "./args/FindFirstFieldAnnotationArgs";
import { FindFirstFieldAnnotationOrThrowArgs } from "./args/FindFirstFieldAnnotationOrThrowArgs";
import { FindManyFieldAnnotationArgs } from "./args/FindManyFieldAnnotationArgs";
import { FindUniqueFieldAnnotationArgs } from "./args/FindUniqueFieldAnnotationArgs";
import { FindUniqueFieldAnnotationOrThrowArgs } from "./args/FindUniqueFieldAnnotationOrThrowArgs";
import { GroupByFieldAnnotationArgs } from "./args/GroupByFieldAnnotationArgs";
import { UpdateManyFieldAnnotationArgs } from "./args/UpdateManyFieldAnnotationArgs";
import { UpdateOneFieldAnnotationArgs } from "./args/UpdateOneFieldAnnotationArgs";
import { UpsertOneFieldAnnotationArgs } from "./args/UpsertOneFieldAnnotationArgs";
import { FieldAnnotation } from "../../../models/FieldAnnotation";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateFieldAnnotation } from "../../outputs/AggregateFieldAnnotation";
import { FieldAnnotationGroupBy } from "../../outputs/FieldAnnotationGroupBy";
export declare class FieldAnnotationCrudResolver {
    aggregateFieldAnnotation(ctx: any, info: GraphQLResolveInfo, args: AggregateFieldAnnotationArgs): Promise<AggregateFieldAnnotation>;
    createManyFieldAnnotation(ctx: any, info: GraphQLResolveInfo, args: CreateManyFieldAnnotationArgs): Promise<AffectedRowsOutput>;
    createOneFieldAnnotation(ctx: any, info: GraphQLResolveInfo, args: CreateOneFieldAnnotationArgs): Promise<FieldAnnotation>;
    deleteManyFieldAnnotation(ctx: any, info: GraphQLResolveInfo, args: DeleteManyFieldAnnotationArgs): Promise<AffectedRowsOutput>;
    deleteOneFieldAnnotation(ctx: any, info: GraphQLResolveInfo, args: DeleteOneFieldAnnotationArgs): Promise<FieldAnnotation | null>;
    findFirstFieldAnnotation(ctx: any, info: GraphQLResolveInfo, args: FindFirstFieldAnnotationArgs): Promise<FieldAnnotation | null>;
    findFirstFieldAnnotationOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstFieldAnnotationOrThrowArgs): Promise<FieldAnnotation | null>;
    fieldAnnotations(ctx: any, info: GraphQLResolveInfo, args: FindManyFieldAnnotationArgs): Promise<FieldAnnotation[]>;
    fieldAnnotation(ctx: any, info: GraphQLResolveInfo, args: FindUniqueFieldAnnotationArgs): Promise<FieldAnnotation | null>;
    getFieldAnnotation(ctx: any, info: GraphQLResolveInfo, args: FindUniqueFieldAnnotationOrThrowArgs): Promise<FieldAnnotation | null>;
    groupByFieldAnnotation(ctx: any, info: GraphQLResolveInfo, args: GroupByFieldAnnotationArgs): Promise<FieldAnnotationGroupBy[]>;
    updateManyFieldAnnotation(ctx: any, info: GraphQLResolveInfo, args: UpdateManyFieldAnnotationArgs): Promise<AffectedRowsOutput>;
    updateOneFieldAnnotation(ctx: any, info: GraphQLResolveInfo, args: UpdateOneFieldAnnotationArgs): Promise<FieldAnnotation | null>;
    upsertOneFieldAnnotation(ctx: any, info: GraphQLResolveInfo, args: UpsertOneFieldAnnotationArgs): Promise<FieldAnnotation>;
}
